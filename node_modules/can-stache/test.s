	.section	__TEXT,__text,regular,pure_instructions
	.macosx_version_min 10, 11
	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp0:
	.cfi_def_cfa_offset 16
Ltmp1:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp2:
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	leaq	L_.str.1(%rip), %rdi
	leaq	-80(%rbp), %rax
	leaq	L_main.q(%rip), %rsi
	movl	$68, %ecx
	movl	%ecx, %edx
	leaq	L_.str(%rip), %r8
	movq	___stack_chk_guard@GOTPCREL(%rip), %r9
	movq	(%r9), %r9
	movq	%r9, -8(%rbp)
	movq	%r8, -88(%rbp)
	movq	%rax, %r8
	movq	%rdi, -96(%rbp)         ## 8-byte Spill
	movq	%r8, %rdi
	movq	%rax, -104(%rbp)        ## 8-byte Spill
	callq	_memcpy
	movq	-88(%rbp), %rsi
	movq	-96(%rbp), %rdi         ## 8-byte Reload
	movq	-104(%rbp), %rdx        ## 8-byte Reload
	movb	$0, %al
	callq	_printf
	movq	___stack_chk_guard@GOTPCREL(%rip), %rdx
	movq	(%rdx), %rdx
	cmpq	-8(%rbp), %rdx
	movl	%eax, -108(%rbp)        ## 4-byte Spill
	jne	LBB0_2
## BB#1:                                ## %SP_return
	addq	$112, %rsp
	popq	%rbp
	retq
LBB0_2:                                 ## %CallStackCheckFailBlk
	callq	___stack_chk_fail
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	"my string"

	.align	4                       ## @main.q
L_main.q:
	.asciz	"my other string which is significantly longer than it was before ok"

L_.str.1:                               ## @.str.1
	.asciz	"p: %p\nq: %p\n"


.subsections_via_symbols
